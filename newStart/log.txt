In [1]: %run ee.py 
---------------------------------------------------------------------------
NumbaError                                Traceback (most recent call last)
/home/wesley/anaconda/lib/python2.7/site-packages/IPython/utils/py3compat.pyc in execfile(fname, *where)
    176             else:
    177                 filename = fname
--> 178             __builtin__.execfile(filename, *where)

/home/wesley/python/honours/newStart/ee.py in <module>()
     66     print(timeTook)
     67 
---> 68 main()

/home/wesley/anaconda/lib/python2.7/site-packages/numba/numbawrapper.so in numba.numbawrapper._NumbaSpecializingWrapper.__call__ (numba/numbawrapper.c:3726)()

/home/wesley/anaconda/lib/python2.7/site-packages/numba/wrapping/compiler.pyc in compile_from_args(self, args, kwargs)
     66     def compile_from_args(self, args, kwargs):
     67         signature = self.resolve_argtypes(args, kwargs)
---> 68         return self.compile(signature)
     69 
     70     def compile(self, signature):

/home/wesley/anaconda/lib/python2.7/site-packages/numba/wrapping/compiler.pyc in compile(self, signature)
     81                      env=self.env, **self.flags)
     82 
---> 83         compiled_function = dec(self.py_func)
     84         return compiled_function
     85 

/home/wesley/anaconda/lib/python2.7/site-packages/numba/decorators.pyc in _jit_decorator(func)
    220         assert kwargs.get('llvm_ee') is None, "Engine should never be provided"
    221         sig, lfunc, wrapper = compile_function(
--> 222             env, func, argtys, restype=return_type, nopython=nopython, **kwargs)
    223         return numbawrapper.create_numba_wrapper(func, wrapper, sig, lfunc)
    224 

/home/wesley/anaconda/lib/python2.7/site-packages/numba/decorators.pyc in compile_function(env, func, argtypes, restype, **kwds)
    131     assert kwds.get('llvm_module') is None, kwds.get('llvm_module')
    132 
--> 133     func_env = pipeline.compile2(env, func, restype, argtypes, **kwds)
    134 
    135     function_cache.register_specialization(func_env)

/home/wesley/anaconda/lib/python2.7/site-packages/numba/pipeline.pyc in compile2(env, func, restype, argtypes, ctypes, compile_only, **kwds)
    132         pipeline = env.get_pipeline(kwds.get('pipeline_name', None))
    133         func_ast.pipeline = pipeline
--> 134         post_ast = pipeline(func_ast, env)
    135         func_signature = func_env.func_signature
    136         symtab = func_env.symtab

/home/wesley/anaconda/lib/python2.7/site-packages/numba/pipeline.pyc in __call__(self, ast, env)
    179 
    180         if self.is_composed:
--> 181             ast = self.transform(ast, env)
    182         else:
    183             try:

/home/wesley/anaconda/lib/python2.7/site-packages/numba/pipeline.pyc in transform(self, ast, env)
    600                 stage_tuple = (stage, utils.ast2tree(ast))
    601                 logger.debug(pprint.pformat(stage_tuple))
--> 602             ast = stage(ast, env)
    603         return ast
    604 

/home/wesley/anaconda/lib/python2.7/site-packages/numba/pipeline.pyc in _stage(ast, env)
    585             def _stage(ast, env):
    586                 stage_obj = getattr(env.pipeline_stages, name)
--> 587                 return _check_stage_object(stage_obj)(ast, env)
    588             _stage.__name__ = name
    589             stage = _stage

/home/wesley/anaconda/lib/python2.7/site-packages/numba/pipeline.pyc in __call__(self, ast, env)
    182         else:
    183             try:
--> 184                 ast = self.transform(ast, env)
    185             except error.NumbaError as e:
    186                 func_env = env.translation.crnt

/home/wesley/anaconda/lib/python2.7/site-packages/numba/pipeline.pyc in transform(self, ast, env)
    412         transformer = self.make_specializer(
    413             array_expressions.ArrayExpressionRewriteNative, ast, env)
--> 414         return transformer.visit(ast)
    415 
    416 class SpecializeComparisons(PipelineStage):

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/ast.pyc in generic_visit(self, node)
    295                 for value in old_value:
    296                     if isinstance(value, AST):
--> 297                         value = self.visit(value)
    298                         if value is None:
    299                             continue

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/ast.pyc in generic_visit(self, node)
    295                 for value in old_value:
    296                     if isinstance(value, AST):
--> 297                         value = self.visit(value)
    298                         if value is None:
    299                             continue

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/ast.pyc in generic_visit(self, node)
    295                 for value in old_value:
    296                     if isinstance(value, AST):
--> 297                         value = self.visit(value)
    298                         if value is None:
    299                             continue

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/site-packages/numba/visitors.pyc in visit_ControlBlock(self, node)
    305         self.setblock(node)
    306         self.visitlist(node.phi_nodes)
--> 307         self.visitlist(node.body)
    308         #self.local_scopes.pop()
    309         return node

/home/wesley/anaconda/lib/python2.7/site-packages/numba/visitors.pyc in visitlist(self, list)
    276         newlist = []
    277         for node in list:
--> 278             result = self.visit(node)
    279             if result is not None:
    280                 newlist.append(result)

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/ast.pyc in generic_visit(self, node)
    304                 old_value[:] = new_values
    305             elif isinstance(old_value, AST):
--> 306                 new_node = self.visit(old_value)
    307                 if new_node is None:
    308                     delattr(node, field)

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/ast.pyc in generic_visit(self, node)
    295                 for value in old_value:
    296                     if isinstance(value, AST):
--> 297                         value = self.visit(value)
    298                         if value is None:
    299                             continue

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/ast.pyc in generic_visit(self, node)
    295                 for value in old_value:
    296                     if isinstance(value, AST):
--> 297                         value = self.visit(value)
    298                         if value is None:
    299                             continue

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/ast.pyc in generic_visit(self, node)
    295                 for value in old_value:
    296                     if isinstance(value, AST):
--> 297                         value = self.visit(value)
    298                         if value is None:
    299                             continue

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/site-packages/numba/visitors.pyc in visit_ControlBlock(self, node)
    305         self.setblock(node)
    306         self.visitlist(node.phi_nodes)
--> 307         self.visitlist(node.body)
    308         #self.local_scopes.pop()
    309         return node

/home/wesley/anaconda/lib/python2.7/site-packages/numba/visitors.pyc in visitlist(self, list)
    276         newlist = []
    277         for node in list:
--> 278             result = self.visit(node)
    279             if result is not None:
    280                 newlist.append(result)

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/ast.pyc in generic_visit(self, node)
    304                 old_value[:] = new_values
    305             elif isinstance(old_value, AST):
--> 306                 new_node = self.visit(old_value)
    307                 if new_node is None:
    308                     delattr(node, field)

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/ast.pyc in generic_visit(self, node)
    295                 for value in old_value:
    296                     if isinstance(value, AST):
--> 297                         value = self.visit(value)
    298                         if value is None:
    299                             continue

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/ast.pyc in generic_visit(self, node)
    295                 for value in old_value:
    296                     if isinstance(value, AST):
--> 297                         value = self.visit(value)
    298                         if value is None:
    299                             continue

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/ast.pyc in generic_visit(self, node)
    295                 for value in old_value:
    296                     if isinstance(value, AST):
--> 297                         value = self.visit(value)
    298                         if value is None:
    299                             continue

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/site-packages/numba/visitors.pyc in visit_ControlBlock(self, node)
    305         self.setblock(node)
    306         self.visitlist(node.phi_nodes)
--> 307         self.visitlist(node.body)
    308         #self.local_scopes.pop()
    309         return node

/home/wesley/anaconda/lib/python2.7/site-packages/numba/visitors.pyc in visitlist(self, list)
    276         newlist = []
    277         for node in list:
--> 278             result = self.visit(node)
    279             if result is not None:
    280                 newlist.append(result)

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/ast.pyc in generic_visit(self, node)
    304                 old_value[:] = new_values
    305             elif isinstance(old_value, AST):
--> 306                 new_node = self.visit(old_value)
    307                 if new_node is None:
    308                     delattr(node, field)

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/ast.pyc in generic_visit(self, node)
    295                 for value in old_value:
    296                     if isinstance(value, AST):
--> 297                         value = self.visit(value)
    298                         if value is None:
    299                             continue

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/ast.pyc in generic_visit(self, node)
    295                 for value in old_value:
    296                     if isinstance(value, AST):
--> 297                         value = self.visit(value)
    298                         if value is None:
    299                             continue

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/ast.pyc in generic_visit(self, node)
    295                 for value in old_value:
    296                     if isinstance(value, AST):
--> 297                         value = self.visit(value)
    298                         if value is None:
    299                             continue

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/site-packages/numba/visitors.pyc in visit_ControlBlock(self, node)
    305         self.setblock(node)
    306         self.visitlist(node.phi_nodes)
--> 307         self.visitlist(node.body)
    308         #self.local_scopes.pop()
    309         return node

/home/wesley/anaconda/lib/python2.7/site-packages/numba/visitors.pyc in visitlist(self, list)
    276         newlist = []
    277         for node in list:
--> 278             result = self.visit(node)
    279             if result is not None:
    280                 newlist.append(result)

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/ast.pyc in generic_visit(self, node)
    304                 old_value[:] = new_values
    305             elif isinstance(old_value, AST):
--> 306                 new_node = self.visit(old_value)
    307                 if new_node is None:
    308                     delattr(node, field)

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/ast.pyc in generic_visit(self, node)
    295                 for value in old_value:
    296                     if isinstance(value, AST):
--> 297                         value = self.visit(value)
    298                         if value is None:
    299                             continue

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/site-packages/numba/array_expressions.pyc in visit_Assign(self, node)
     98 
     99         self.nesting_level = self.is_slice_assign
--> 100         node.value = self.visit(node.value)
    101         self.nesting_level = 0
    102 

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/ast.pyc in generic_visit(self, node)
    304                 old_value[:] = new_values
    305             elif isinstance(old_value, AST):
--> 306                 new_node = self.visit(old_value)
    307                 if new_node is None:
    308                     delattr(node, field)

/home/wesley/anaconda/lib/python2.7/ast.pyc in visit(self, node)
    239         method = 'visit_' + node.__class__.__name__
    240         visitor = getattr(self, method, self.generic_visit)
--> 241         return visitor(node)
    242 
    243     def generic_visit(self, node):

/home/wesley/anaconda/lib/python2.7/site-packages/numba/array_expressions.pyc in visit_BinOp(self, node)
    134     def visit_BinOp(self, node):
    135         elementwise = node.type.is_array
--> 136         return self.visit_elementwise(elementwise, node)
    137 
    138     visit_UnaryOp = visit_BinOp

/home/wesley/anaconda/lib/python2.7/site-packages/numba/array_expressions.pyc in visit_elementwise(self, elementwise, node)
     82     def visit_elementwise(self, elementwise, node):
     83         if elementwise and self.nesting_level == 0:
---> 84             return self.register_array_expression(node)
     85 
     86         self.nesting_level += 1

/home/wesley/anaconda/lib/python2.7/site-packages/numba/array_expressions.pyc in register_array_expression(self, node, lhs)
    270             self.env, None, ufunc_ast, signature,
    271             function_globals=self.env.crnt.function_globals,
--> 272             wrap=False, link=False, nopython=True,
    273             #llvm_module=llvm_module, # pipeline_name='codegen',
    274         )

/home/wesley/anaconda/lib/python2.7/site-packages/numba/pipeline.pyc in run_pipeline2(env, func, func_ast, func_signature, pipeline, **kwargs)
     81                                 **kwargs) as func_env:
     82         pipeline = env.get_pipeline(kwargs.get('pipeline_name', None))
---> 83         post_ast = pipeline(func_ast, env)
     84         func_signature = func_env.func_signature
     85         symtab = func_env.symtab

/home/wesley/anaconda/lib/python2.7/site-packages/numba/pipeline.pyc in __call__(self, ast, env)
    179 
    180         if self.is_composed:
--> 181             ast = self.transform(ast, env)
    182         else:
    183             try:

/home/wesley/anaconda/lib/python2.7/site-packages/numba/pipeline.pyc in transform(self, ast, env)
    600                 stage_tuple = (stage, utils.ast2tree(ast))
    601                 logger.debug(pprint.pformat(stage_tuple))
--> 602             ast = stage(ast, env)
    603         return ast
    604 

/home/wesley/anaconda/lib/python2.7/site-packages/numba/pipeline.pyc in _stage(ast, env)
    585             def _stage(ast, env):
    586                 stage_obj = getattr(env.pipeline_stages, name)
--> 587                 return _check_stage_object(stage_obj)(ast, env)
    588             _stage.__name__ = name
    589             stage = _stage

/home/wesley/anaconda/lib/python2.7/site-packages/numba/pipeline.pyc in __call__(self, ast, env)
    190                     error_env.merge_in(parent_func_env.error_env)
    191                 elif not e.has_report:
--> 192                     reporting.report(env, exc=e)
    193                 raise
    194 

/home/wesley/anaconda/lib/python2.7/site-packages/numba/reporting.pyc in report(env, exc)
    179     if exc is not None and not post_mortem:
    180         # Shorten traceback
--> 181         raise exc

NumbaError: (see below)
--------------------- Numba Encountered Errors or Warnings ---------------------
Error Cannot use object call in nopython context
--------------------------------------------------------------------------------

In [2]: 
 
